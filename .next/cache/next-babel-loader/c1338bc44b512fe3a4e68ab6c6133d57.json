{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\n\nasync function getConcept(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    data.push(doc.data());\n  });\n  return data;\n}\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    data.push(doc.id);\n  });\n  return data[0];\n}\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let docID = await getConceptDocID(concept);\n  let conceptRef = conceptsRef.doc(docID);\n  let newExplanation = {\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    voteLog: []\n  };\n  conceptRef.update({\n    explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n  });\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid async function main() {// saveExplanationToDB(\"emergence\", \"@barackobama\", \"this is my second best explanation\")\n}();\nmodule.exports = {\n  getConcept,\n  saveExplanationToDB\n}; // https://firebase.google.com/docs/firestore/query-data/get-data","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","getConcept","concept","snapshot","where","get","data","forEach","doc","push","getConceptDocID","id","saveExplanationToDB","author","explanation","docID","conceptRef","newExplanation","Timestamp","now","voteLog","update","explanations","FieldValue","arrayUnion","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":";;;;AAAA;;AAEA,MAAMA,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADD;AAEnBC,EAAAA,UAAU,EAAE,8BAFO;AAGnBC,EAAAA,WAAW,EAAE,qCAHM;AAInBC,EAAAA,SAAS,EAAE,cAJQ;AAKnBC,EAAAA,aAAa,EAAE,0BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;;AAWA,IAAI,CAACC,QAAQ,CAACC,IAAT,CAAcC,MAAnB,EAA2B;AACzBF,EAAAA,QAAQ,CAACG,aAAT,CAAuBf,cAAvB;AACD;;AAED,MAAMgB,EAAE,GAAGJ,QAAQ,CAACK,SAAT,EAAX;AACA,MAAMC,WAAW,GAAGF,EAAE,CAACG,UAAH,CAAc,UAAd,CAApB;;AAEA,eAAeC,UAAf,CAA0BC,OAA1B,EAAmC;AACjC,MAAIC,QAAQ,GAAG,MAAMJ,WAAW,CAACK,KAAZ,CAAkB,SAAlB,EAA6B,IAA7B,EAAmCF,OAAnC,EAA4CG,GAA5C,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AAC5BF,IAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACF,IAAJ,EAAV;AACD,GAFK,CAAN;AAGA,SAAOA,IAAP;AACD;;AAED,eAAeI,eAAf,CAA+BR,OAA/B,EAAwC;AACtC,MAAIC,QAAQ,GAAG,MAAMJ,WAAW,CAACK,KAAZ,CAAkB,SAAlB,EAA6B,IAA7B,EAAmCF,OAAnC,EAA4CG,GAA5C,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AAC5BF,IAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACG,EAAd;AACD,GAFK,CAAN;AAGA,SAAOL,IAAI,CAAC,CAAD,CAAX;AACD;;AAED,eAAeM,mBAAf,CAAmCV,OAAnC,EAA4CW,MAA5C,EAAoDC,WAApD,EAAiE;AAC/D,MAAIC,KAAK,GAAG,MAAML,eAAe,CAACR,OAAD,CAAjC;AAEA,MAAIc,UAAU,GAAGjB,WAAW,CAACS,GAAZ,CAAgBO,KAAhB,CAAjB;AAEA,MAAIE,cAAc,GAAG;AACnB,cAAUJ,MADS;AAEnB,gBAAYpB,QAAQ,CAACK,SAAT,CAAmBoB,SAAnB,CAA6BC,GAA7B,EAFO;AAGnB,mBAAeL,WAHI;AAInBM,IAAAA,OAAO,EAAE;AAJU,GAArB;AAOAJ,EAAAA,UAAU,CAACK,MAAX,CAAkB;AAChBC,IAAAA,YAAY,EAAE7B,QAAQ,CAACK,SAAT,CAAmByB,UAAnB,CAA8BC,UAA9B,CAAyCP,cAAzC;AADE,GAAlB;AAGD;;AAED,MAAMQ,QAAQ,GAAG,IAAIhC,QAAQ,CAACiC,IAAT,CAAcC,mBAAlB,EAAjB,C,CAEA;;AAEA,KAAK,eAAeC,IAAf,GAAsB,CACzB;AACD,CAFI,EAAL;AAGAC,MAAM,CAACC,OAAP,GAAiB;AAAE7B,EAAAA,UAAF;AAAcW,EAAAA;AAAd,CAAjB,C,CAGA","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\n\nasync function getConcept(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.data())\n  })\n  return data\n}\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id)\n  })\n  return data[0]\n}\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let docID = await getConceptDocID(concept)\n\n  let conceptRef = conceptsRef.doc(docID)\n\n  let newExplanation = {\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    voteLog: []\n  }\n\n  conceptRef.update({\n    explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n  });\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n  // saveExplanationToDB(\"emergence\", \"@barackobama\", \"this is my second best explanation\")\n}()\nmodule.exports = { getConcept, saveExplanationToDB }\n\n\n// https://firebase.google.com/docs/firestore/query-data/get-data\n"]},"metadata":{},"sourceType":"script"}