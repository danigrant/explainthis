{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations');\nconst usersRef = db.collection('users'); // returns obj with all explanations for one topic, ordered by voteCount\n\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get();\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  };\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    });\n  });\n  return data;\n} // saves explanation to db\n\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  };\n  explanationsRef.add(newExplanation);\n} // up or down votes an explanation\n\n\nasync function addVote(vote, user, explanationID) {\n  console.log('vote: ', vote);\n  let explanationRef = explanationsRef.doc(explanationID);\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n  const increment = firebase.firestore.FieldValue.increment(1);\n  const decrement = firebase.firestore.FieldValue.increment(-1);\n\n  if (vote > 0) {\n    explanationRef.update({\n      score: increment\n    });\n  } else {\n    explanationRef.update({\n      score: decrement\n    });\n  }\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    });\n  });\n  return data;\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).get();\n  let data = {\n    \"explanations\": []\n  };\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    });\n  });\n  return data;\n} // increment/decrement users score\n\n\nasync function updateUserScore(value, username) {} // increment users explanations\n\n\nasync function incrementUserExplanationCount(username) {}\n\nconst provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid async function main() {}();\nmodule.exports = {\n  getConceptExplanations,\n  saveExplanationToDB,\n  addVote,\n  getAllConcepts,\n  getUsersExplanations\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","getConceptExplanations","concept","snapshot","where","get","data","forEach","doc","docData","explanations","push","author","datetime","explanation","score","id","saveExplanationToDB","newExplanation","Timestamp","now","add","addVote","vote","user","explanationID","console","log","explanationRef","newVote","update","voteLog","FieldValue","arrayUnion","increment","decrement","getAllConcepts","getUsersExplanations","username","updateUserScore","value","incrementUserExplanationCount","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  console.log('vote: ', vote);\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  const increment = firebase.firestore.FieldValue.increment(1);\n  const decrement = firebase.firestore.FieldValue.increment(-1);\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).get()\n  let data = {\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// increment/decrement users score\nasync function updateUserScore(value, username) {\n  \n}\n\n// increment users explanations\nasync function incrementUserExplanationCount(username) {\n\n}\n\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations }\n"]},"metadata":{},"sourceType":"script"}