{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar conceptsRef = db.collection('concepts');\nvar explanationsRef = db.collection('explanations'); // returns obj with all explanations for one topic, ordered by voteCount\n\nfunction getConceptExplanations(_x) {\n  return _getConceptExplanations.apply(this, arguments);\n} // saves explanation to db\n\n\nfunction _getConceptExplanations() {\n  _getConceptExplanations = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2(concept) {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return explanationsRef.where('concept', '==', concept).get();\n\n          case 2:\n            snapshot = _context2.sent;\n            data = {\n              \"concept\": concept,\n              \"explanations\": []\n            };\n            _context2.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.explanations.push({\n                \"author\": docData.author,\n                \"datetime\": docData.datetime,\n                \"explanation\": docData.explanation,\n                \"score\": docData.score,\n                \"id\": doc.id\n              });\n            });\n\n          case 6:\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getConceptExplanations.apply(this, arguments);\n}\n\nfunction saveExplanationToDB(_x2, _x3, _x4) {\n  return _saveExplanationToDB.apply(this, arguments);\n} // up or down votes an explanation\n\n\nfunction _saveExplanationToDB() {\n  _saveExplanationToDB = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3(concept, author, explanation) {\n    var newExplanation;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            newExplanation = {\n              \"concept\": concept,\n              \"author\": author,\n              \"datetime\": firebase.firestore.Timestamp.now(),\n              \"explanation\": explanation,\n              \"score\": 0,\n              \"voteLog\": []\n            };\n            explanationsRef.add(newExplanation);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _saveExplanationToDB.apply(this, arguments);\n}\n\nfunction addVote(_x5, _x6, _x7) {\n  return _addVote.apply(this, arguments);\n}\n\nfunction _addVote() {\n  _addVote = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee4(vote, user, explanationID) {\n    var explanationRef, newVote, increment, decrement;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log('vote: ', vote);\n            explanationRef = explanationsRef.doc(explanationID);\n            newVote = {\n              \"datetime\": firebase.firestore.Timestamp.now(),\n              \"user\": user,\n              \"vote\": vote\n            };\n            explanationRef.update({\n              voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n            });\n            increment = firebase.firestore.FieldValue.increment(1);\n            decrement = firebase.firestore.FieldValue.increment(-1);\n\n            if (vote > 0) {\n              explanationRef.update({\n                score: increment\n              });\n            } else {\n              explanationRef.update({\n                score: decrement\n              });\n            }\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _addVote.apply(this, arguments);\n}\n\nfunction getAllConcepts() {\n  return _getAllConcepts.apply(this, arguments);\n}\n\nfunction _getAllConcepts() {\n  _getAllConcepts = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee5() {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return conceptsRef.get();\n\n          case 2:\n            snapshot = _context5.sent;\n            data = [];\n            _context5.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"concept\": {\n                  \"id\": doc.id,\n                  \"concept\": docData.concept\n                }\n              });\n            });\n\n          case 6:\n            return _context5.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getAllConcepts.apply(this, arguments);\n}\n\nfunction getUsersExplanations(_x8) {\n  return _getUsersExplanations.apply(this, arguments);\n}\n\nfunction _getUsersExplanations() {\n  _getUsersExplanations = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee6(username) {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return explanationsRef.where('author', '==', username).get();\n\n          case 2:\n            snapshot = _context6.sent;\n            data = {\n              \"explanations\": []\n            };\n            _context6.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.explanations.push({\n                \"concept\": docData.concept,\n                \"datetime\": docData.datetime,\n                \"explanation\": docData.explanation,\n                \"score\": docData.score,\n                \"id\": doc.id\n              });\n            });\n\n          case 6:\n            return _context6.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getUsersExplanations.apply(this, arguments);\n}\n\nvar provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid function () {\n  var _main = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function main() {\n    return _main.apply(this, arguments);\n  }\n\n  return main;\n}()();\nmodule.exports = {\n  getConceptExplanations: getConceptExplanations,\n  saveExplanationToDB: saveExplanationToDB,\n  addVote: addVote,\n  getAllConcepts: getAllConcepts,\n  getUsersExplanations: getUsersExplanations\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","getConceptExplanations","concept","where","get","snapshot","data","forEach","doc","docData","explanations","push","author","datetime","explanation","score","id","saveExplanationToDB","newExplanation","Timestamp","now","add","addVote","vote","user","explanationID","console","log","explanationRef","newVote","update","voteLog","FieldValue","arrayUnion","increment","decrement","getAllConcepts","getUsersExplanations","username","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":";;;;;;;;;;AAAA;;AAEA,IAAMA,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADD;AAEnBC,EAAAA,UAAU,EAAE,8BAFO;AAGnBC,EAAAA,WAAW,EAAE,qCAHM;AAInBC,EAAAA,SAAS,EAAE,cAJQ;AAKnBC,EAAAA,aAAa,EAAE,0BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;;AAWA,IAAI,CAACC,QAAQ,CAACC,IAAT,CAAcC,MAAnB,EAA2B;AACzBF,EAAAA,QAAQ,CAACG,aAAT,CAAuBf,cAAvB;AACD;;AAED,IAAMgB,EAAE,GAAGJ,QAAQ,CAACK,SAAT,EAAX;AACA,IAAMC,WAAW,GAAGF,EAAE,CAACG,UAAH,CAAc,UAAd,CAApB;AACA,IAAMC,eAAe,GAAGJ,EAAE,CAACG,UAAH,CAAc,cAAd,CAAxB,C,CAEA;;SACeE,sB;;EAmBf;;;;;;+BAnBA,kBAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBF,eAAe,CAACG,KAAhB,CAAsB,SAAtB,EAAiC,IAAjC,EAAuCD,OAAvC,EAAgDE,GAAhD,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa;AACT,yBAAWJ,OADF;AAET,8BAAgB;AAFP,aAFb;AAAA;AAAA,mBAMQG,QAAQ,CAACE,OAAT,CAAiB,UAAAC,GAAG,EAAI;AAC5B,kBAAIC,OAAO,GAAGD,GAAG,CAACF,IAAJ,EAAd;AACAA,cAAAA,IAAI,CAACI,YAAL,CAAkBC,IAAlB,CAAuB;AACrB,0BAAUF,OAAO,CAACG,MADG;AAErB,4BAAYH,OAAO,CAACI,QAFC;AAGrB,+BAAeJ,OAAO,CAACK,WAHF;AAIrB,yBAASL,OAAO,CAACM,KAJI;AAKrB,sBAAMP,GAAG,CAACQ;AALW,eAAvB;AAOD,aATK,CANR;;AAAA;AAAA,8CAgBSV,IAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAoBeW,mB;;EAaf;;;;;;+BAbA,kBAAmCf,OAAnC,EAA4CU,MAA5C,EAAoDE,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AACMI,YAAAA,cADN,GACuB;AACnB,yBAAWhB,OADQ;AAEnB,wBAAUU,MAFS;AAGnB,0BAAYpB,QAAQ,CAACK,SAAT,CAAmBsB,SAAnB,CAA6BC,GAA7B,EAHO;AAInB,6BAAeN,WAJI;AAKnB,uBAAS,CALU;AAMnB,yBAAW;AANQ,aADvB;AAUEd,YAAAA,eAAe,CAACqB,GAAhB,CAAoBH,cAApB;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAceI,O;;;;;;;+BAAf,kBAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,IAAtB;AACIK,YAAAA,cAFN,GAEuB5B,eAAe,CAACQ,GAAhB,CAAoBiB,aAApB,CAFvB;AAIMI,YAAAA,OAJN,GAIgB;AACZ,0BAAYrC,QAAQ,CAACK,SAAT,CAAmBsB,SAAnB,CAA6BC,GAA7B,EADA;AAEZ,sBAAQI,IAFI;AAGZ,sBAAQD;AAHI,aAJhB;AAUEK,YAAAA,cAAc,CAACE,MAAf,CAAsB;AACpBC,cAAAA,OAAO,EAAEvC,QAAQ,CAACK,SAAT,CAAmBmC,UAAnB,CAA8BC,UAA9B,CAAyCJ,OAAzC;AADW,aAAtB;AAIMK,YAAAA,SAdR,GAcoB1C,QAAQ,CAACK,SAAT,CAAmBmC,UAAnB,CAA8BE,SAA9B,CAAwC,CAAxC,CAdpB;AAeQC,YAAAA,SAfR,GAeoB3C,QAAQ,CAACK,SAAT,CAAmBmC,UAAnB,CAA8BE,SAA9B,CAAwC,CAAC,CAAzC,CAfpB;;AAiBE,gBAAIX,IAAI,GAAG,CAAX,EAAc;AACZK,cAAAA,cAAc,CAACE,MAAf,CAAsB;AAAEf,gBAAAA,KAAK,EAAEmB;AAAT,eAAtB;AACD,aAFD,MAEO;AACLN,cAAAA,cAAc,CAACE,MAAf,CAAsB;AAAEf,gBAAAA,KAAK,EAAEoB;AAAT,eAAtB;AACD;;AArBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAwBeC,c;;;;;;;+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBtC,WAAW,CAACM,GAAZ,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAIQD,QAAQ,CAACE,OAAT,CAAiB,UAAAC,GAAG,EAAI;AAC5B,kBAAIC,OAAO,GAAGD,GAAG,CAACF,IAAJ,EAAd;AACAA,cAAAA,IAAI,CAACK,IAAL,CAAU;AACR,2BAAW;AACT,wBAAMH,GAAG,CAACQ,EADD;AAET,6BAAWP,OAAO,CAACP;AAFV;AADH,eAAV;AAMD,aARK,CAJR;;AAAA;AAAA,8CAcSI,IAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAiBe+B,oB;;;;;;;+BAAf,kBAAoCC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBtC,eAAe,CAACG,KAAhB,CAAsB,QAAtB,EAAgC,IAAhC,EAAsCmC,QAAtC,EAAgDlC,GAAhD,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa;AACT,8BAAgB;AADP,aAFb;AAAA;AAAA,mBAKQD,QAAQ,CAACE,OAAT,CAAiB,UAAAC,GAAG,EAAI;AAC5B,kBAAIC,OAAO,GAAGD,GAAG,CAACF,IAAJ,EAAd;AACAA,cAAAA,IAAI,CAACI,YAAL,CAAkBC,IAAlB,CAAuB;AACrB,2BAAWF,OAAO,CAACP,OADE;AAErB,4BAAYO,OAAO,CAACI,QAFC;AAGrB,+BAAeJ,OAAO,CAACK,WAHF;AAIrB,yBAASL,OAAO,CAACM,KAJI;AAKrB,sBAAMP,GAAG,CAACQ;AALW,eAAvB;AAOD,aATK,CALR;;AAAA;AAAA,8CAeSV,IAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBA,IAAMiC,QAAQ,GAAG,IAAI/C,QAAQ,CAACgD,IAAT,CAAcC,mBAAlB,EAAjB,C,CAEA;;AAEA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,WAAeC,IAAf;AAAA;AAAA;;AAAA,SAAeA,IAAf;AAAA,KAAL;AAIAC,MAAM,CAACC,OAAP,GAAiB;AAAE3C,EAAAA,sBAAsB,EAAtBA,sBAAF;AAA0BgB,EAAAA,mBAAmB,EAAnBA,mBAA1B;AAA+CK,EAAAA,OAAO,EAAPA,OAA/C;AAAwDc,EAAAA,cAAc,EAAdA,cAAxD;AAAwEC,EAAAA,oBAAoB,EAApBA;AAAxE,CAAjB","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  console.log('vote: ', vote);\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  const increment = firebase.firestore.FieldValue.increment(1);\n  const decrement = firebase.firestore.FieldValue.increment(-1);\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).get()\n  let data = {\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations }\n"]},"metadata":{},"sourceType":"script"}