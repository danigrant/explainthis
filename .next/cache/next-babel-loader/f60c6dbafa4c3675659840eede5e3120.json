{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations'); // returns obj with all explanations for one topic, ordered by voteCount\n\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get();\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  };\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    });\n  });\n  return data;\n} // saves explanation to db\n\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  };\n  explanationsRef.add(newExplanation);\n} // async function saveExplanationToDB(concept, author, explanation) {\n//   let docID = await getConceptDocID(concept)\n//\n//   let conceptRef = conceptsRef.doc(docID)\n//\n//   let newExplanation = {\n//     \"author\": author,\n//     \"datetime\": firebase.firestore.Timestamp.now(),\n//     \"explanation\": explanation,\n//     voteLog: []\n//   }\n//\n//   conceptRef.update({\n//     explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n//   });\n// }\n\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    data.push(doc.id);\n  });\n  return data[0];\n}\n\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID);\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n  const decrement = firebase.firestore.FieldValue.increment(-1);\n\n  if (vote > 0) {\n    explanationRef.update({\n      score: increment\n    });\n  } else {\n    explanationRef.update({\n      score: decrement\n    });\n  }\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid async function main() {\n  addVote(-1, \"@barackobama\", '8YFuRoNai30HMQrUIm76');\n}();\nmodule.exports = {\n  getConceptExplanations,\n  saveExplanationToDB\n}; // https://firebase.google.com/docs/firestore/query-data/get-data","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","getConceptExplanations","concept","snapshot","where","get","data","forEach","doc","docData","explanations","push","author","datetime","explanation","score","id","saveExplanationToDB","newExplanation","Timestamp","now","add","getConceptDocID","addVote","vote","user","explanationID","explanationRef","newVote","update","voteLog","FieldValue","arrayUnion","decrement","increment","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n}\n\n// async function saveExplanationToDB(concept, author, explanation) {\n//   let docID = await getConceptDocID(concept)\n//\n//   let conceptRef = conceptsRef.doc(docID)\n//\n//   let newExplanation = {\n//     \"author\": author,\n//     \"datetime\": firebase.firestore.Timestamp.now(),\n//     \"explanation\": explanation,\n//     voteLog: []\n//   }\n//\n//   conceptRef.update({\n//     explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n//   });\n// }\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id)\n  })\n  return data[0]\n}\n\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  const decrement = firebase.firestore.FieldValue.increment(-1);\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n  addVote(-1, \"@barackobama\", '8YFuRoNai30HMQrUIm76')\n}()\nmodule.exports = { getConceptExplanations, saveExplanationToDB }\n\n\n// https://firebase.google.com/docs/firestore/query-data/get-data\n"]},"metadata":{},"sourceType":"script"}