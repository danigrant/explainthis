{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar conceptsRef = db.collection('concepts');\n\nfunction getConcept(_x) {\n  return _getConcept.apply(this, arguments);\n}\n\nfunction _getConcept() {\n  _getConcept = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2(concept) {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return conceptsRef.where('concept', '==', concept).get();\n\n          case 2:\n            snapshot = _context2.sent;\n            data = [];\n            _context2.next = 6;\n            return snapshot.forEach(function (doc) {\n              data.push(doc.data());\n            });\n\n          case 6:\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getConcept.apply(this, arguments);\n}\n\nfunction getConceptDocID(_x2) {\n  return _getConceptDocID.apply(this, arguments);\n}\n\nfunction _getConceptDocID() {\n  _getConceptDocID = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3(concept) {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return conceptsRef.where('concept', '==', concept).get();\n\n          case 2:\n            snapshot = _context3.sent;\n            data = [];\n            _context3.next = 6;\n            return snapshot.forEach(function (doc) {\n              data.push(doc.id);\n            });\n\n          case 6:\n            return _context3.abrupt(\"return\", data[0]);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getConceptDocID.apply(this, arguments);\n}\n\nfunction saveExplanationToDB(_x3, _x4, _x5) {\n  return _saveExplanationToDB.apply(this, arguments);\n}\n\nfunction _saveExplanationToDB() {\n  _saveExplanationToDB = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee4(concept, author, explanation) {\n    var docID, conceptRef, newExplanation;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getConceptDocID(concept);\n\n          case 2:\n            docID = _context4.sent;\n            conceptRef = conceptsRef.doc(docID);\n            newExplanation = {\n              \"author\": author,\n              \"datetime\": firebase.firestore.Timestamp.now(),\n              \"explanation\": explanation,\n              voteLog: []\n            };\n            conceptRef.update({\n              explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n            });\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _saveExplanationToDB.apply(this, arguments);\n}\n\nvar provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid function () {\n  var _main = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function main() {\n    return _main.apply(this, arguments);\n  }\n\n  return main;\n}()();\nmodule.exports = {\n  getConcept: getConcept,\n  saveExplanationToDB: saveExplanationToDB\n}; // https://firebase.google.com/docs/firestore/query-data/get-data","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","getConcept","concept","where","get","snapshot","data","forEach","doc","push","getConceptDocID","id","saveExplanationToDB","author","explanation","docID","conceptRef","newExplanation","Timestamp","now","voteLog","update","explanations","FieldValue","arrayUnion","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":";;;;;;;;;;AAAA;;AAEA,IAAMA,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADD;AAEnBC,EAAAA,UAAU,EAAE,8BAFO;AAGnBC,EAAAA,WAAW,EAAE,qCAHM;AAInBC,EAAAA,SAAS,EAAE,cAJQ;AAKnBC,EAAAA,aAAa,EAAE,0BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;;AAWA,IAAI,CAACC,QAAQ,CAACC,IAAT,CAAcC,MAAnB,EAA2B;AACzBF,EAAAA,QAAQ,CAACG,aAAT,CAAuBf,cAAvB;AACD;;AAED,IAAMgB,EAAE,GAAGJ,QAAQ,CAACK,SAAT,EAAX;AACA,IAAMC,WAAW,GAAGF,EAAE,CAACG,UAAH,CAAc,UAAd,CAApB;;SAEeC,U;;;;;;;+BAAf,kBAA0BC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBH,WAAW,CAACI,KAAZ,CAAkB,SAAlB,EAA6B,IAA7B,EAAmCD,OAAnC,EAA4CE,GAA5C,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAGQD,QAAQ,CAACE,OAAT,CAAiB,UAAAC,GAAG,EAAI;AAC5BF,cAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACF,IAAJ,EAAV;AACD,aAFK,CAHR;;AAAA;AAAA,8CAMSA,IANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SASeI,e;;;;;;;+BAAf,kBAA+BR,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBH,WAAW,CAACI,KAAZ,CAAkB,SAAlB,EAA6B,IAA7B,EAAmCD,OAAnC,EAA4CE,GAA5C,EADvB;;AAAA;AACMC,YAAAA,QADN;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAGQD,QAAQ,CAACE,OAAT,CAAiB,UAAAC,GAAG,EAAI;AAC5BF,cAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACG,EAAd;AACD,aAFK,CAHR;;AAAA;AAAA,8CAMSL,IAAI,CAAC,CAAD,CANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SASeM,mB;;;;;;;+BAAf,kBAAmCV,OAAnC,EAA4CW,MAA5C,EAAoDC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBJ,eAAe,CAACR,OAAD,CADnC;;AAAA;AACMa,YAAAA,KADN;AAGMC,YAAAA,UAHN,GAGmBjB,WAAW,CAACS,GAAZ,CAAgBO,KAAhB,CAHnB;AAKME,YAAAA,cALN,GAKuB;AACnB,wBAAUJ,MADS;AAEnB,0BAAYpB,QAAQ,CAACK,SAAT,CAAmBoB,SAAnB,CAA6BC,GAA7B,EAFO;AAGnB,6BAAeL,WAHI;AAInBM,cAAAA,OAAO,EAAE;AAJU,aALvB;AAYEJ,YAAAA,UAAU,CAACK,MAAX,CAAkB;AAChBC,cAAAA,YAAY,EAAE7B,QAAQ,CAACK,SAAT,CAAmByB,UAAnB,CAA8BC,UAA9B,CAAyCP,cAAzC;AADE,aAAlB;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBA,IAAMQ,QAAQ,GAAG,IAAIhC,QAAQ,CAACiC,IAAT,CAAcC,mBAAlB,EAAjB,C,CAEA;;AAEA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,WAAeC,IAAf;AAAA;AAAA;;AAAA,SAAeA,IAAf;AAAA,KAAL;AAGAC,MAAM,CAACC,OAAP,GAAiB;AAAE7B,EAAAA,UAAU,EAAVA,UAAF;AAAcW,EAAAA,mBAAmB,EAAnBA;AAAd,CAAjB,C,CAGA","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\n\nasync function getConcept(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.data())\n  })\n  return data\n}\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id)\n  })\n  return data[0]\n}\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let docID = await getConceptDocID(concept)\n\n  let conceptRef = conceptsRef.doc(docID)\n\n  let newExplanation = {\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    voteLog: []\n  }\n\n  conceptRef.update({\n    explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n  });\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n  // saveExplanationToDB(\"emergence\", \"@barackobama\", \"this is my second best explanation\")\n}()\nmodule.exports = { getConcept, saveExplanationToDB }\n\n\n// https://firebase.google.com/docs/firestore/query-data/get-data\n"]},"metadata":{},"sourceType":"script"}