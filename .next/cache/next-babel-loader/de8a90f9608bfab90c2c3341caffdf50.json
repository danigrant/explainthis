{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations');\nconst usersRef = db.collection('users');\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1); // returns obj with all explanations for one topic, ordered by voteCount\n\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).orderBy('score', 'desc').get();\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  };\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    });\n  });\n  return data;\n} // saves explanation to db\n\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  };\n  explanationsRef.add(newExplanation);\n  incrementUserExplanationCount(author);\n} // up or down votes an explanation\n\n\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID);\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n\n  if (vote > 0) {\n    explanationRef.update({\n      score: increment\n    });\n  } else {\n    explanationRef.update({\n      score: decrement\n    });\n  }\n\n  updateUserScore(vote, user);\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    });\n  });\n  return data;\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).orderBy('score', 'desc').get();\n  let data = {\n    \"explanations\": []\n  };\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"author\": username,\n      \"id\": doc.id\n    });\n  });\n  return data;\n} // get specific user id\n\n\nasync function getUserDocID(username) {\n  let id = \"\";\n  let snapshot = await usersRef.where('username', '==', username).get();\n  await snapshot.forEach(doc => {\n    id = doc.id;\n  });\n  return id;\n} // increment/decrement users score by -1 or 1\n\n\nasync function updateUserScore(value, username) {\n  let userRef = usersRef.doc((await getUserDocID(username)));\n\n  if (value > 0) {\n    userRef.update({\n      score: increment\n    });\n  } else {\n    userRef.update({\n      score: decrement\n    });\n  }\n} // increment users explanations\n\n\nasync function incrementUserExplanationCount(username) {\n  let userRef = usersRef.doc((await getUserDocID(username)));\n  userRef.update({\n    contributedExplanations: increment\n  });\n} // get user data aka score and num contributed explanations\n\n\nasync function getUserPoints(username) {\n  let data = {};\n  let snapshot = await usersRef.where('username', '==', username).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data = {\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations\n    };\n  });\n  console.log(data);\n  return data;\n} // get top 10 users by points\n\n\nasync function getPointsLeaderboard() {\n  let data = [];\n  let snapshot = await usersRef.orderBy('score', 'desc').orderBy('contributedExplanations', 'desc').limit(10).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"username\": docData.username,\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations,\n      \"id\": doc.id\n    });\n  });\n  return data;\n} // get top 10 users by contributed explanations\n\n\nasync function getNumExplanationsLeaderboard() {\n  let data = [];\n  let snapshot = await usersRef.orderBy('contributedExplanations', 'desc').orderBy('score', 'desc').limit(10).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"username\": docData.username,\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations,\n      \"id\": doc.id\n    });\n  });\n  return data;\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid async function main() {}();\nmodule.exports = {\n  getConceptExplanations,\n  saveExplanationToDB,\n  addVote,\n  getAllConcepts,\n  getUsersExplanations,\n  getUserPoints,\n  getPointsLeaderboard,\n  getNumExplanationsLeaderboard\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","increment","FieldValue","decrement","getConceptExplanations","concept","snapshot","where","orderBy","get","data","forEach","doc","docData","explanations","push","author","datetime","explanation","score","id","saveExplanationToDB","newExplanation","Timestamp","now","add","incrementUserExplanationCount","addVote","vote","user","explanationID","explanationRef","newVote","update","voteLog","arrayUnion","updateUserScore","getAllConcepts","getUsersExplanations","username","getUserDocID","value","userRef","contributedExplanations","getUserPoints","console","log","getPointsLeaderboard","limit","getNumExplanationsLeaderboard","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).orderBy('score', 'desc').get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n  incrementUserExplanationCount(author)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n\n  updateUserScore(vote, user)\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).orderBy('score', 'desc').get()\n  let data = {\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"author\": username,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// get specific user id\nasync function getUserDocID(username) {\n  let id = \"\"\n  let snapshot = await usersRef.where('username', '==', username).get()\n  await snapshot.forEach(doc => {\n    id = doc.id\n  })\n  return id\n}\n\n// increment/decrement users score by -1 or 1\nasync function updateUserScore(value, username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  if (value > 0) {\n    userRef.update({ score: increment })\n  } else {\n    userRef.update({ score: decrement })\n  }\n}\n\n// increment users explanations\nasync function incrementUserExplanationCount(username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  userRef.update({ contributedExplanations: increment })\n}\n\n// get user data aka score and num contributed explanations\nasync function getUserPoints(username) {\n  let data = {}\n  let snapshot = await usersRef.where('username', '==', username).get()\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data = {\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations\n    }\n  })\n  console.log(data);\n  return data\n}\n\n// get top 10 users by points\nasync function getPointsLeaderboard() {\n  let data = []\n  let snapshot = await usersRef.orderBy('score', 'desc').orderBy('contributedExplanations', 'desc').limit(10).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"username\": docData.username,\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// get top 10 users by contributed explanations\nasync function getNumExplanationsLeaderboard() {\n  let data = []\n  let snapshot = await usersRef.orderBy('contributedExplanations', 'desc').orderBy('score', 'desc').limit(10).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"username\": docData.username,\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations, getUserPoints, getPointsLeaderboard, getNumExplanationsLeaderboard }\n"]},"metadata":{},"sourceType":"script"}