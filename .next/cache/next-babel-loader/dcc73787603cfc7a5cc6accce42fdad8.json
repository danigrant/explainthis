{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar conceptsRef = db.collection('concepts');\nvar explanationsRef = db.collection('explanations');\nvar usersRef = db.collection('users');\nvar increment = firebase.firestore.FieldValue.increment(1);\nvar decrement = firebase.firestore.FieldValue.increment(-1); // returns obj with all explanations for one topic, ordered by voteCount\n\nfunction getConceptExplanations(_x) {\n  return _getConceptExplanations.apply(this, arguments);\n} // saves explanation to db\n\n\nfunction _getConceptExplanations() {\n  _getConceptExplanations = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2(concept) {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return explanationsRef.where('concept', '==', concept).get();\n\n          case 2:\n            snapshot = _context2.sent;\n            data = {\n              \"concept\": concept,\n              \"explanations\": []\n            };\n            _context2.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.explanations.push({\n                \"author\": docData.author,\n                \"datetime\": docData.datetime,\n                \"explanation\": docData.explanation,\n                \"score\": docData.score,\n                \"id\": doc.id\n              });\n            });\n\n          case 6:\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getConceptExplanations.apply(this, arguments);\n}\n\nfunction saveExplanationToDB(_x2, _x3, _x4) {\n  return _saveExplanationToDB.apply(this, arguments);\n} // up or down votes an explanation\n\n\nfunction _saveExplanationToDB() {\n  _saveExplanationToDB = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3(concept, author, explanation) {\n    var newExplanation;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            newExplanation = {\n              \"concept\": concept,\n              \"author\": author,\n              \"datetime\": firebase.firestore.Timestamp.now(),\n              \"explanation\": explanation,\n              \"score\": 0,\n              \"voteLog\": []\n            };\n            explanationsRef.add(newExplanation);\n            incrementUserExplanationCount(author);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _saveExplanationToDB.apply(this, arguments);\n}\n\nfunction addVote(_x5, _x6, _x7) {\n  return _addVote.apply(this, arguments);\n}\n\nfunction _addVote() {\n  _addVote = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee4(vote, user, explanationID) {\n    var explanationRef, newVote;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            explanationRef = explanationsRef.doc(explanationID);\n            newVote = {\n              \"datetime\": firebase.firestore.Timestamp.now(),\n              \"user\": user,\n              \"vote\": vote\n            };\n            explanationRef.update({\n              voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n            });\n\n            if (vote > 0) {\n              explanationRef.update({\n                score: increment\n              });\n            } else {\n              explanationRef.update({\n                score: decrement\n              });\n            }\n\n            updateUserScore(vote, user);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _addVote.apply(this, arguments);\n}\n\nfunction getAllConcepts() {\n  return _getAllConcepts.apply(this, arguments);\n}\n\nfunction _getAllConcepts() {\n  _getAllConcepts = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee5() {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return conceptsRef.get();\n\n          case 2:\n            snapshot = _context5.sent;\n            data = [];\n            _context5.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"concept\": {\n                  \"id\": doc.id,\n                  \"concept\": docData.concept\n                }\n              });\n            });\n\n          case 6:\n            return _context5.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getAllConcepts.apply(this, arguments);\n}\n\nfunction getUsersExplanations(_x8) {\n  return _getUsersExplanations.apply(this, arguments);\n} // get specific user id\n\n\nfunction _getUsersExplanations() {\n  _getUsersExplanations = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee6(username) {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return explanationsRef.where('author', '==', username).get();\n\n          case 2:\n            snapshot = _context6.sent;\n            data = {\n              \"explanations\": []\n            };\n            _context6.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.explanations.push({\n                \"concept\": docData.concept,\n                \"datetime\": docData.datetime,\n                \"explanation\": docData.explanation,\n                \"score\": docData.score,\n                \"id\": doc.id\n              });\n            });\n\n          case 6:\n            return _context6.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getUsersExplanations.apply(this, arguments);\n}\n\nfunction getUserDocID(_x9) {\n  return _getUserDocID.apply(this, arguments);\n} // increment/decrement users score by -1 or 1\n\n\nfunction _getUserDocID() {\n  _getUserDocID = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee7(username) {\n    var id, snapshot;\n    return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            id = \"\";\n            _context7.next = 3;\n            return usersRef.where('username', '==', username).get();\n\n          case 3:\n            snapshot = _context7.sent;\n            _context7.next = 6;\n            return snapshot.forEach(function (doc) {\n              id = doc.id;\n            });\n\n          case 6:\n            return _context7.abrupt(\"return\", id);\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getUserDocID.apply(this, arguments);\n}\n\nfunction updateUserScore(_x10, _x11) {\n  return _updateUserScore.apply(this, arguments);\n} // increment users explanations\n\n\nfunction _updateUserScore() {\n  _updateUserScore = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee8(value, username) {\n    var userRef;\n    return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.t0 = usersRef;\n            _context8.next = 3;\n            return getUserDocID(username);\n\n          case 3:\n            _context8.t1 = _context8.sent;\n            userRef = _context8.t0.doc.call(_context8.t0, _context8.t1);\n\n            if (value > 0) {\n              userRef.update({\n                score: increment\n              });\n            } else {\n              userRef.update({\n                score: decrement\n              });\n            }\n\n          case 6:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _updateUserScore.apply(this, arguments);\n}\n\nfunction incrementUserExplanationCount(_x12) {\n  return _incrementUserExplanationCount.apply(this, arguments);\n} // get user data aka score and num contributed explanations\n\n\nfunction _incrementUserExplanationCount() {\n  _incrementUserExplanationCount = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee9(username) {\n    var userRef;\n    return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.t0 = usersRef;\n            _context9.next = 3;\n            return getUserDocID(username);\n\n          case 3:\n            _context9.t1 = _context9.sent;\n            userRef = _context9.t0.doc.call(_context9.t0, _context9.t1);\n            userRef.update({\n              contributedExplanations: increment\n            });\n\n          case 6:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _incrementUserExplanationCount.apply(this, arguments);\n}\n\nfunction getUserPoints(_x13) {\n  return _getUserPoints.apply(this, arguments);\n}\n\nfunction _getUserPoints() {\n  _getUserPoints = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee10(username) {\n    var data, snapshot;\n    return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            data = [];\n            _context10.t0 = usersRef;\n            _context10.next = 4;\n            return getUserDocID(username);\n\n          case 4:\n            _context10.t1 = _context10.sent;\n            snapshot = _context10.t0.doc.call(_context10.t0, _context10.t1).get();\n            _context10.next = 8;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"points\": docData.score,\n                \"numContributedExplanations\": docData.contributedExplanations\n              });\n            });\n\n          case 8:\n            console.log(data);\n            return _context10.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _getUserPoints.apply(this, arguments);\n}\n\nvar provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid function () {\n  var _main = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getUserPoints(\"@barackobama\");\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function main() {\n    return _main.apply(this, arguments);\n  }\n\n  return main;\n}()();\nmodule.exports = {\n  getConceptExplanations: getConceptExplanations,\n  saveExplanationToDB: saveExplanationToDB,\n  addVote: addVote,\n  getAllConcepts: getAllConcepts,\n  getUsersExplanations: getUsersExplanations,\n  getUserPoints: getUserPoints\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","increment","FieldValue","decrement","getConceptExplanations","concept","where","get","snapshot","data","forEach","doc","docData","explanations","push","author","datetime","explanation","score","id","saveExplanationToDB","newExplanation","Timestamp","now","add","incrementUserExplanationCount","addVote","vote","user","explanationID","explanationRef","newVote","update","voteLog","arrayUnion","updateUserScore","getAllConcepts","getUsersExplanations","username","getUserDocID","value","userRef","contributedExplanations","getUserPoints","console","log","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n  incrementUserExplanationCount(author)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n\n  updateUserScore(vote, user)\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).get()\n  let data = {\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// get specific user id\nasync function getUserDocID(username) {\n  let id = \"\"\n  let snapshot = await usersRef.where('username', '==', username).get()\n  await snapshot.forEach(doc => {\n    id = doc.id\n  })\n  return id\n}\n\n// increment/decrement users score by -1 or 1\nasync function updateUserScore(value, username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  if (value > 0) {\n    userRef.update({ score: increment })\n  } else {\n    userRef.update({ score: decrement })\n  }\n}\n\n// increment users explanations\nasync function incrementUserExplanationCount(username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  userRef.update({ contributedExplanations: increment })\n}\n\n// get user data aka score and num contributed explanations\nasync function getUserPoints(username) {\n  let data = []\n  let snapshot = usersRef.doc(await getUserDocID(username)).get()\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations\n    })\n  })\n  console.log(data);\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n  await getUserPoints(\"@barackobama\")\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations, getUserPoints }\n"]},"metadata":{},"sourceType":"script"}