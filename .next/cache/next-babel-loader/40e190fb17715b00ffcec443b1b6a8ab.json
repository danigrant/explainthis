{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations'); // returns all of the explanations for one concept\n// ARCHIVE\n\nasync function getConcept(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    data.push(doc.data());\n  });\n  return data;\n} // returns obj with all explanations for one topic, ordered by voteCount\n\n\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get();\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  };\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score\n    });\n  });\n  return data;\n}\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    data.push(doc.id);\n  });\n  return data[0];\n}\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let docID = await getConceptDocID(concept);\n  let conceptRef = conceptsRef.doc(docID);\n  let newExplanation = {\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    voteLog: []\n  };\n  conceptRef.update({\n    explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n  });\n}\n\nasync function addVote(concept, explanationID) {\n  let docID = await getConceptDocID(concept);\n  let conceptRef = conceptsRef.doc(docID);\n  let vote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": \"@barackobama\",\n    \"vote\": 1\n  };\n  let snapshot = await conceptsRef.get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    data.push(doc.id, doc.data(), doc);\n  });\n  console.log(data);\n  return data;\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider(); // todo sign in with twitter\n\nvoid async function main() {// console.log(await getConceptExplanations(\"emergence\"))\n}();\nmodule.exports = {\n  getConceptExplanations,\n  saveExplanationToDB\n}; // https://firebase.google.com/docs/firestore/query-data/get-data","map":{"version":3,"sources":["/Users/danigrant/Projects/explainthis/components/Firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","getConcept","concept","snapshot","where","get","data","forEach","doc","push","getConceptExplanations","docData","explanations","author","datetime","explanation","score","getConceptDocID","id","saveExplanationToDB","docID","conceptRef","newExplanation","Timestamp","now","voteLog","update","FieldValue","arrayUnion","addVote","explanationID","vote","console","log","provider","auth","TwitterAuthProvider","main","module","exports"],"mappings":";;;;AAAA;;AAEA,MAAMA,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADD;AAEnBC,EAAAA,UAAU,EAAE,8BAFO;AAGnBC,EAAAA,WAAW,EAAE,qCAHM;AAInBC,EAAAA,SAAS,EAAE,cAJQ;AAKnBC,EAAAA,aAAa,EAAE,0BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;;AAWA,IAAI,CAACC,QAAQ,CAACC,IAAT,CAAcC,MAAnB,EAA2B;AACzBF,EAAAA,QAAQ,CAACG,aAAT,CAAuBf,cAAvB;AACD;;AAED,MAAMgB,EAAE,GAAGJ,QAAQ,CAACK,SAAT,EAAX;AACA,MAAMC,WAAW,GAAGF,EAAE,CAACG,UAAH,CAAc,UAAd,CAApB;AACA,MAAMC,eAAe,GAAGJ,EAAE,CAACG,UAAH,CAAc,cAAd,CAAxB,C,CAEA;AACA;;AACA,eAAeE,UAAf,CAA0BC,OAA1B,EAAmC;AACjC,MAAIC,QAAQ,GAAG,MAAML,WAAW,CAACM,KAAZ,CAAkB,SAAlB,EAA6B,IAA7B,EAAmCF,OAAnC,EAA4CG,GAA5C,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AAC5BF,IAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACF,IAAJ,EAAV;AACD,GAFK,CAAN;AAGA,SAAOA,IAAP;AACD,C,CAED;;;AACA,eAAeI,sBAAf,CAAsCR,OAAtC,EAA+C;AAC7C,MAAIC,QAAQ,GAAG,MAAMH,eAAe,CAACI,KAAhB,CAAsB,SAAtB,EAAiC,IAAjC,EAAuCF,OAAvC,EAAgDG,GAAhD,EAArB;AACA,MAAIC,IAAI,GAAG;AACT,eAAWJ,OADF;AAET,oBAAgB;AAFP,GAAX;AAIA,QAAMC,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AAC5B,QAAIG,OAAO,GAAGH,GAAG,CAACF,IAAJ,EAAd;AACAA,IAAAA,IAAI,CAACM,YAAL,CAAkBH,IAAlB,CAAuB;AACrB,gBAAUE,OAAO,CAACE,MADG;AAErB,kBAAYF,OAAO,CAACG,QAFC;AAGrB,qBAAeH,OAAO,CAACI,WAHF;AAIrB,eAASJ,OAAO,CAACK;AAJI,KAAvB;AAMD,GARK,CAAN;AASA,SAAOV,IAAP;AACD;;AAED,eAAeW,eAAf,CAA+Bf,OAA/B,EAAwC;AACtC,MAAIC,QAAQ,GAAG,MAAML,WAAW,CAACM,KAAZ,CAAkB,SAAlB,EAA6B,IAA7B,EAAmCF,OAAnC,EAA4CG,GAA5C,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AAC5BF,IAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACU,EAAd;AACD,GAFK,CAAN;AAGA,SAAOZ,IAAI,CAAC,CAAD,CAAX;AACD;;AAED,eAAea,mBAAf,CAAmCjB,OAAnC,EAA4CW,MAA5C,EAAoDE,WAApD,EAAiE;AAC/D,MAAIK,KAAK,GAAG,MAAMH,eAAe,CAACf,OAAD,CAAjC;AAEA,MAAImB,UAAU,GAAGvB,WAAW,CAACU,GAAZ,CAAgBY,KAAhB,CAAjB;AAEA,MAAIE,cAAc,GAAG;AACnB,cAAUT,MADS;AAEnB,gBAAYrB,QAAQ,CAACK,SAAT,CAAmB0B,SAAnB,CAA6BC,GAA7B,EAFO;AAGnB,mBAAeT,WAHI;AAInBU,IAAAA,OAAO,EAAE;AAJU,GAArB;AAOAJ,EAAAA,UAAU,CAACK,MAAX,CAAkB;AAChBd,IAAAA,YAAY,EAAEpB,QAAQ,CAACK,SAAT,CAAmB8B,UAAnB,CAA8BC,UAA9B,CAAyCN,cAAzC;AADE,GAAlB;AAGD;;AAED,eAAeO,OAAf,CAAuB3B,OAAvB,EAAgC4B,aAAhC,EAA+C;AAC7C,MAAIV,KAAK,GAAG,MAAMH,eAAe,CAACf,OAAD,CAAjC;AACA,MAAImB,UAAU,GAAGvB,WAAW,CAACU,GAAZ,CAAgBY,KAAhB,CAAjB;AAEA,MAAIW,IAAI,GAAG;AACT,gBAAYvC,QAAQ,CAACK,SAAT,CAAmB0B,SAAnB,CAA6BC,GAA7B,EADH;AAET,YAAQ,cAFC;AAGT,YAAQ;AAHC,GAAX;AAMA,MAAIrB,QAAQ,GAAG,MAAML,WAAW,CAACO,GAAZ,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiBC,GAAG,IAAI;AAC5BF,IAAAA,IAAI,CAACG,IAAL,CAAUD,GAAG,CAACU,EAAd,EAAkBV,GAAG,CAACF,IAAJ,EAAlB,EAA8BE,GAA9B;AACD,GAFK,CAAN;AAGAwB,EAAAA,OAAO,CAACC,GAAR,CAAY3B,IAAZ;AACA,SAAOA,IAAP;AACD;;AAED,MAAM4B,QAAQ,GAAG,IAAI1C,QAAQ,CAAC2C,IAAT,CAAcC,mBAAlB,EAAjB,C,CAEA;;AAEA,KAAK,eAAeC,IAAf,GAAsB,CACzB;AACD,CAFI,EAAL;AAGAC,MAAM,CAACC,OAAP,GAAiB;AAAE7B,EAAAA,sBAAF;AAA0BS,EAAAA;AAA1B,CAAjB,C,CAGA","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\n\n// returns all of the explanations for one concept\n// ARCHIVE\nasync function getConcept(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.data())\n  })\n  return data\n}\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score\n    })\n  })\n  return data\n}\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id)\n  })\n  return data[0]\n}\n\nasync function saveExplanationToDB(concept, author, explanation) {\n  let docID = await getConceptDocID(concept)\n\n  let conceptRef = conceptsRef.doc(docID)\n\n  let newExplanation = {\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    voteLog: []\n  }\n\n  conceptRef.update({\n    explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n  });\n}\n\nasync function addVote(concept, explanationID) {\n  let docID = await getConceptDocID(concept)\n  let conceptRef = conceptsRef.doc(docID)\n\n  let vote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": \"@barackobama\",\n    \"vote\": 1\n  }\n\n  let snapshot = await conceptsRef.get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id, doc.data(), doc)\n  })\n  console.log(data);\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n  // console.log(await getConceptExplanations(\"emergence\"))\n}()\nmodule.exports = { getConceptExplanations, saveExplanationToDB }\n\n\n// https://firebase.google.com/docs/firestore/query-data/get-data\n"]},"metadata":{},"sourceType":"script"}