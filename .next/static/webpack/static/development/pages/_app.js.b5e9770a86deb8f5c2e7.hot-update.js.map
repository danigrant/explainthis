{"version":3,"file":"static/webpack/static/development/pages/_app.js.b5e9770a86deb8f5c2e7.hot-update.js","sources":["webpack:///./components/Firebase.js","webpack:///./pages/_app.js"],"sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).orderBy('score', 'desc').get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n  incrementUserExplanationCount(author)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n\n  updateUserScore(vote, user)\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).orderBy('score', 'desc').get()\n  let data = {\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"author\": username,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// get specific user id\nasync function getUserDocID(username) {\n  let id = \"\"\n  let snapshot = await usersRef.where('username', '==', username).get()\n  await snapshot.forEach(doc => {\n    id = doc.id\n  })\n  return id\n}\n\n// increment/decrement users score by -1 or 1\nasync function updateUserScore(value, username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  if (value > 0) {\n    userRef.update({ score: increment })\n  } else {\n    userRef.update({ score: decrement })\n  }\n}\n\n// increment users explanations\nasync function incrementUserExplanationCount(username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  userRef.update({ contributedExplanations: increment })\n}\n\n// get user data aka score and num contributed explanations\nasync function getUserPoints(username) {\n  let data = {}\n  let snapshot = await usersRef.where('username', '==', username).get()\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data = {\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations\n    }\n  })\n  console.log(data);\n  return data\n}\n\n// get top 10 users by points\nasync function getPointsLeaderboard() {\n  let data = []\n  let snapshot = await usersRef.orderBy('score', 'desc').orderBy('contributedExplanations', 'desc').limit(10).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"username\": docData.username,\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// get top 10 users by contributed explanations\nasync function getNumExplanationsLeaderboard() {\n  let data = []\n  let snapshot = await usersRef.orderBy('contributedExplanations', 'desc').orderBy('score', 'desc').limit(10).get();\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"username\": docData.username,\n      \"points\": docData.score,\n      \"numContributedExplanations\": docData.contributedExplanations,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\nasync function loginWithTwitter() {\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    let token = result.credential.accessToken\n    let secret = result.credential.secret\n    let user = result.user\n  })\n}\n\nvoid async function main() {\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations, getUserPoints, getPointsLeaderboard, getNumExplanationsLeaderboard, loginWithTwitter }\n","import React from 'react'\nimport App from 'next/app'\nimport Head from 'next/head';\nimport '../components/Firebase'\nimport { loginWithTwitter } from '../components/Firebase'\nimport '../components/Twitter'\n\nclass MyApp extends App {\n  constructor(props) {\n    super(props)\n    this.state = {\n      authenticated: false\n    }\n    this.updateAuth = this.updateAuth.bind(this)\n  }\n  async updateAuth() {\n    await loginWithTwitter()\n    this.state = {\n      authenticated: !this.state.authenticated\n    }\n  }\n  render() {\n    const { Component, pageProps } = this.props\n    return (\n      <div className=\"wrapper\">\n      <Head>\n        <link href=\"https://fonts.googleapis.com/css?family=IBM+Plex+Sans:400,600,700&display=swap\" rel=\"stylesheet\" />\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n        <link rel=\"stylesheet\" href=\"//cdn.quilljs.com/1.2.6/quill.snow.css\" />\n      </Head>\n      <Component  updateAuth={this.updateAuth} authenticated={this.state.authenticated} {...pageProps} />\n      <style jsx>{`\n          .wrapper {\n            font-family: -apple-system, 'IBM Plex Sans', sans-serif;\n          }\n      `}</style>\n      </div>\n    )\n  }\n}\n\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n\n  return { ...appProps }\n}\n\nexport default MyApp\n"],"mappings":"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","sourceRoot":""}