{"version":3,"file":"static/webpack/static/development/pages/explainer.js.9c067d26f7422202178a.hot-update.js","sources":["webpack:///./components/Firebase.js","webpack:///./pages/explainer.js"],"sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  console.log('vote: ', vote);\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  const increment = firebase.firestore.FieldValue.increment(1);\n  const decrement = firebase.firestore.FieldValue.increment(-1);\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).get()\n  let data = {\n    \"explanations\": {}\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations }\n","import React from 'react'\nimport Header from '../components/Header'\nimport AppContainer from '../components/AppContainer';\nimport ProfileExplanationsSection from '../components/ProfileExplanationsSection'\nimport { getUsersExplanations } from '../components/Firebase'\n\nclass Explainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: []\n    }\n  }\n  async componentWillMount() {\n    this.setState({\n      data: await getUsersExplanations('@barackobama')\n    })\n    console.log(this.state.data);\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <AppContainer>\n          <div className=\"header\">\n            <div className=\"column\">\n              <img className=\"avatar\" src=\"https://pbs.twimg.com/profile_images/822547732376207360/5g0FC8XX.jpg\" />\n            </div>\n            <div className=\"column\">\n              <h1 className=\"username\">{this.router.query.explainer}</h1>\n              <div className=\"header-stats\">\n                <div className=\"header-stat-item\">\n                  <i className=\"material-icons\">emoji_events_rounded</i>\n                  <p>Leaderboard Place • #15</p>\n                </div>\n                <div className=\"header-stat-item\">\n                  <i className=\"material-icons\">emoji_flags_rounded</i>\n                  <p>Points • 150</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"explanationsSection\">\n            <p>All of @barackobama's explanations:</p>\n            <ProfileExplanationsSection />\n          </div>\n        </AppContainer>\n        <style jsx>{`\n          .avatar {\n            border-radius: 100px;\n            width: 100px;\n          }\n          .column {\n            flex: 50%;\n            display: inline-block;\n          }\n          .header-stat-item {\n            display: inline-block;\n          }\n          .header-stat-item p {\n            display: inline-block;\n            margin-left: 5px;\n          }\n          .header-stat-item i {\n            width: 24px;\n            position: relative;\n            top: 5px;\n          }\n          .header-stat-item:nth-of-type(2) {\n            margin-left: 35px;\n          }\n          .header {\n            border-bottom: 2px solid #ddd;\n          }\n          .username {\n            margin-bottom: 5px;\n            margin-top: 0px;\n          }\n          .column:nth-of-type(2) {\n            margin-left: 15px;\n            position: relative;\n            bottom: 5px;\n          }\n          .explanationsSection p {\n            padding-bottom: 10px;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n          }\n        `}</style>\n      </div>\n    )\n  }\n}\n\nexport default Explainer\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAmBA;AACA;AACA;;;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoBA;;AAaA;AACA;AACA;;;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAcA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiBA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAkBA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;;;;;;;;;AACA;;AACA;AACA;;;;AADA;;;AADA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAsEA;;;;AArFA;AACA;AAuFA;;;;A","sourceRoot":""}