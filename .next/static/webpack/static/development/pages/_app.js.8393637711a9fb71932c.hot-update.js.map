{"version":3,"file":"static/webpack/static/development/pages/_app.js.8393637711a9fb71932c.hot-update.js","sources":["webpack:///./components/Firebase.js","webpack:///./pages/_app.js"],"sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\n\nasync function getConcept(concept) {\n  let tempConcept = ''\n\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.data())\n  })\n  return data\n}\n\nasync function saveToDB() {\n  \n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\n\nmodule.exports = { getConcept, saveToDB }\n\n\n// https://firebase.google.com/docs/firestore/query-data/get-data\n","import Head from 'next/head';\nimport '../components/Firebase'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <div className=\"wrapper\">\n    <Head>\n      <link href=\"https://fonts.googleapis.com/css?family=IBM+Plex+Sans:400,600,700&display=swap\" rel=\"stylesheet\" />\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n      <link rel=\"stylesheet\" href=\"//cdn.quilljs.com/1.2.6/quill.snow.css\" />\n    </Head>\n    <Component {...pageProps} />\n    <style jsx>{`\n        .wrapper {\n          font-family: -apple-system, 'IBM Plex Sans', sans-serif;\n        }\n    `}</style>\n    </div>\n  )\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAWA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AAIA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAcA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}