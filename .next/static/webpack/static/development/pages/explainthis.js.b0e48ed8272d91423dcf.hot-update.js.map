{"version":3,"file":"static/webpack/static/development/pages/explainthis.js.b0e48ed8272d91423dcf.hot-update.js","sources":["webpack:///./components/Firebase.js"],"sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score\n    })\n  })\n  return data\n}\n\nasync function getConceptDocID(concept) {\n  let snapshot = await conceptsRef.where('concept', '==', concept).get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id)\n  })\n  return data[0]\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n}\n\n// async function saveExplanationToDB(concept, author, explanation) {\n//   let docID = await getConceptDocID(concept)\n//\n//   let conceptRef = conceptsRef.doc(docID)\n//\n//   let newExplanation = {\n//     \"author\": author,\n//     \"datetime\": firebase.firestore.Timestamp.now(),\n//     \"explanation\": explanation,\n//     voteLog: []\n//   }\n//\n//   conceptRef.update({\n//     explanations: firebase.firestore.FieldValue.arrayUnion(newExplanation)\n//   });\n// }\n\nasync function addVote(concept, explanationID) {\n  let docID = await getConceptDocID(concept)\n  let explanationsRef = conceptsRef.doc(docID)\n\n  let vote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": \"@barackobama\",\n    \"vote\": 1\n  }\n\n  let snapshot = await conceptsRef.get()\n  let data = []\n  await snapshot.forEach(doc => {\n    data.push(doc.id, doc.data(), doc)\n  })\n  console.log(data);\n  return data\n}\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n  // console.log(await getConceptExplanations(\"emergence\"))\n}()\nmodule.exports = { getConceptExplanations, saveExplanationToDB }\n\n\n// https://firebase.google.com/docs/firestore/query-data/get-data\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAkBA;;AASA;AACA;AACA;;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAUA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA8BA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAJA;AAAA;AACA;AADA;AAUA;AACA;AAXA;AAAA;AAaA;AACA;AACA;AAfA;AAeA;AAfA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAmBA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}