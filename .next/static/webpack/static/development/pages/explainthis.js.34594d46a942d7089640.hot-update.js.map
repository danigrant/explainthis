{"version":3,"file":"static/webpack/static/development/pages/explainthis.js.34594d46a942d7089640.hot-update.js","sources":["webpack:///./components/Firebase.js"],"sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: \"explain-this.firebaseapp.com\",\n    databaseURL: \"https://explain-this.firebaseio.com\",\n    projectId: \"explain-this\",\n    storageBucket: \"explain-this.appspot.com\",\n    messagingSenderId: \"145315125752\",\n    appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n    measurementId: \"G-2HP7D44T1F\"\n  };\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\n// returns obj with all explanations for one topic, ordered by voteCount\nasync function getConceptExplanations(concept) {\n  let snapshot = await explanationsRef.where('concept', '==', concept).get()\n  let data = {\n    \"concept\": concept,\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"author\": docData.author,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// saves explanation to db\nasync function saveExplanationToDB(concept, author, explanation) {\n  let newExplanation = {\n    \"concept\": concept,\n    \"author\": author,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": explanation,\n    \"score\": 0,\n    \"voteLog\": []\n  }\n\n  explanationsRef.add(newExplanation)\n  incrementUserExplanationCount(author)\n}\n\n// up or down votes an explanation\nasync function addVote(vote, user, explanationID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"user\": user,\n    \"vote\": vote\n  }\n\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  })\n\n  if (vote > 0) {\n    explanationRef.update({ score: increment })\n  } else {\n    explanationRef.update({ score: decrement })\n  }\n\n  updateUserScore(vote, user)\n}\n\nasync function getAllConcepts() {\n  let snapshot = await conceptsRef.get()\n  let data = []\n\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"concept\": {\n        \"id\": doc.id,\n        \"concept\": docData.concept\n      }\n    })\n  })\n\n  return data\n}\n\nasync function getUsersExplanations(username) {\n  let snapshot = await explanationsRef.where('author', '==', username).get()\n  let data = {\n    \"explanations\": []\n  }\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.explanations.push({\n      \"concept\": docData.concept,\n      \"datetime\": docData.datetime,\n      \"explanation\": docData.explanation,\n      \"score\": docData.score,\n      \"id\": doc.id\n    })\n  })\n  return data\n}\n\n// get specific user id\nasync function getUserDocID(username) {\n  let id = \"\"\n  let snapshot = await usersRef.where('username', '==', username).get()\n  await snapshot.forEach(doc => {\n    id = doc.id\n  })\n  return id\n}\n\n// increment/decrement users score by -1 or 1\nasync function updateUserScore(value, username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  if (value > 0) {\n    userRef.update({ score: increment })\n  } else {\n    userRef.update({ score: decrement })\n  }\n}\n\n// increment users explanations\nasync function incrementUserExplanationCount(username) {\n  let userRef = usersRef.doc(await getUserDocID(username))\n\n  userRef.update({ contributedExplanations: increment })\n}\n\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// todo sign in with twitter\n\nvoid async function main() {\n\n}()\n\nmodule.exports = { getConceptExplanations, saveExplanationToDB, addVote, getAllConcepts, getUsersExplanations }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAmBA;AACA;AACA;;;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoBA;;AAcA;AACA;AACA;;;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAeA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsBA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiBA;;AAkBA;AACA;AACA;;;;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAmBA;;AASA;AACA;AACA;;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAIA;AACA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAUA;;AAUA;AACA;AACA;;;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAWA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAOA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}